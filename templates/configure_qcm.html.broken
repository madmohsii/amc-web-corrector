% extends "base.html" %}

{% block title %}Configuration QCM - {{ project.name }}{% endblock %}

{% block content %}
<div class="card">
    <div style="display: flex; justify-content: space-between; align-items: center;">
        <div>
            <h1>üìù Configuration du QCM</h1>
            <p>Projet: {{ project.name }}</p>
        </div>
        <a href="{{ url_for('project_detail', project_id=project_id) }}" class="btn btn-secondary">Retour</a>
    </div>
</div>

<div class="card">
    <h2>üéØ Options rapides</h2>
    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1rem;">
        <button onclick="loadSampleQCM()" class="btn btn-secondary">
            üìö Charger un QCM d'exemple
        </button>
        <button onclick="addQuestion()" class="btn">
            ‚ûï Ajouter une question
        </button>
        <button onclick="clearAll()" class="btn btn-danger">
            üóëÔ∏è Vider tout
        </button>
    </div>
</div>

<form method="POST" id="qcmForm">
    <input type="hidden" id="questionCount" name="question_count" value="0">
    
    <div class="card">
        <h2>‚ùì Questions</h2>
        <div id="questionsContainer">
            <!-- Les questions seront ajout√©es ici dynamiquement -->
        </div>
        
        <div style="margin-top: 2rem; text-align: center;">
            <button type="button" onclick="addQuestion()" class="btn btn-secondary">
                ‚ûï Ajouter une question
            </button>
        </div>
    </div>
    
    <div class="card">
        <h2>‚öôÔ∏è Configuration de notation</h2>
        <div class="form-group">
            <label for="scoring_strategy">Strat√©gie de notation</label>
            <select id="scoring_strategy" name="scoring_strategy">
                {% for key, strategy in scoring_strategies.items() %}
                <option value="{{ key }}">{{ strategy.name }} - {{ strategy.description }}</option>
                {% endfor %}
            </select>
        </div>
    </div>
    
    <div class="card">
        <div style="display: flex; gap: 1rem; justify-content: center;">
            <button type="submit" class="btn">üíæ Sauvegarder la configuration</button>
            <button type="button" onclick="previewLatex()" class="btn btn-secondary">üëÅÔ∏è Aper√ßu LaTeX</button>
        </div>
    </div>
</form>

<!-- Modal aper√ßu LaTeX -->
<div id="latexModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000;">
    <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 2rem; border-radius: 10px; max-width: 80%; width: 600px; max-height: 80%; overflow-y: auto;">
        <h3>üìÑ Aper√ßu du code LaTeX</h3>
        <pre id="latexPreview" style="background: #f8f9fa; padding: 1rem; border-radius: 5px; overflow-x: auto; font-size: 0.9rem;"></pre>
        <button onclick="closeLatexModal()" class="btn">Fermer</button>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
let questionCounter = 0;

// Charger la configuration existante si elle existe
{% if existing_config %}
const existingConfig = {{ existing_config | tojson }};
document.addEventListener('DOMContentLoaded', function() {
    loadConfiguration(existingConfig);
});
{% endif %}

function addQuestion(questionData = null) {
    const container = document.getElementById('questionsContainer');
    const questionIndex = questionCounter++;
    
    const questionDiv = document.createElement('div');
    questionDiv.className = 'question-block';
    questionDiv.style.cssText = 'border: 1px solid #ddd; border-radius: 8px; padding: 1.5rem; margin-bottom: 1rem; background: #fafafa;';
    questionDiv.id = `question_${questionIndex}`;
    
    questionDiv.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
            <h4>Question ${questionIndex + 1}</h4>
            <button type="button" onclick="removeQuestion(${questionIndex})" class="btn btn-danger" style="padding: 5px 10px;">‚úï</button>
        </div>
        
        <div class="form-group">
            <label>Texte de la question *</label>
            <textarea name="question_${questionIndex}_text" rows="2" placeholder="Saisissez votre question..." required>${questionData ? questionData.text : ''}</textarea>
        </div>
        
        <div class="choices-container" id="choices_${questionIndex}">
            <label>Choix de r√©ponses :</label>
            <div id="choicesContainer_${questionIndex}">
                <!-- Les choix seront ajout√©s ici -->
            </div>
            <button type="button" onclick="addChoice(${questionIndex})" class="btn btn-secondary" style="margin-top: 0.5rem; padding: 5px 15px;">+ Ajouter un choix</button>
        </div>
<input type="hidden" name="question_${questionIndex}_choice_count" id="choiceCount_${questionIndex}" value="0">
    `;
    
    container.appendChild(questionDiv);
    
    // Ajouter des choix par d√©faut ou existants
    if (questionData && questionData.choices) {
        questionData.choices.forEach(choice => {
            addChoice(questionIndex, choice);
        });
    } else {
        // Ajouter 4 choix par d√©faut
        for (let i = 0; i < 4; i++) {
            addChoice(questionIndex);
        }
    }
    
    updateQuestionCount();
}

function removeQuestion(questionIndex) {
    const questionDiv = document.getElementById(`question_${questionIndex}`);
    if (questionDiv) {
        questionDiv.remove();
        updateQuestionCount();
    }
}

function addChoice(questionIndex, choiceData = null) {
    const container = document.getElementById(`choicesContainer_${questionIndex}`);
    const choiceCountInput = document.getElementById(`choiceCount_${questionIndex}`);
    const choiceIndex = parseInt(choiceCountInput.value);
    
    const choiceDiv = document.createElement('div');
    choiceDiv.style.cssText = 'display: flex; align-items: center; gap: 0.5rem; margin-bottom: 0.5rem; padding: 0.5rem; background: white; border-radius: 5px;';
    choiceDiv.id = `choice_${questionIndex}_${choiceIndex}`;
    
    choiceDiv.innerHTML = `
        <input type="checkbox" name="question_${questionIndex}_choice_${choiceIndex}_correct" 
               id="correct_${questionIndex}_${choiceIndex}" ${choiceData && choiceData.correct ? 'checked' : ''}>
        <label for="correct_${questionIndex}_${choiceIndex}" style="margin: 0; color: #28a745; font-weight: bold;">‚úì</label>
        <input type="text" name="question_${questionIndex}_choice_${choiceIndex}_text" 
               placeholder="Choix de r√©ponse..." style="flex: 1;" 
               value="${choiceData ? choiceData.text : ''}" required>
        <button type="button" onclick="removeChoice(${questionIndex}, ${choiceIndex})" 
                style="background: #dc3545; color: white; border: none; border-radius: 3px; padding: 2px 8px; cursor: pointer;">‚úï</button>
    `;
    
    container.appendChild(choiceDiv);
    choiceCountInput.value = choiceIndex + 1;
}

function removeChoice(questionIndex, choiceIndex) {
    const choiceDiv = document.getElementById(`choice_${questionIndex}_${choiceIndex}`);
    if (choiceDiv) {
        choiceDiv.remove();
    }
}

function updateQuestionCount() {
    const questions = document.querySelectorAll('.question-block');
    document.getElementById('questionCount').value = questions.length;
}

function loadSampleQCM() {
    if (confirm('Cela va remplacer la configuration actuelle. Continuer ?')) {
        document.getElementById('questionsContainer').innerHTML = '';
        questionCounter = 0;
        
        const sampleQuestions = {{ sample_questions | tojson }};
        sampleQuestions.forEach(question => {
            addQuestion(question);
        });
    }
}

function loadConfiguration(config) {
    document.getElementById('questionsContainer').innerHTML = '';
    questionCounter = 0;
    
    config.forEach(question => {
        addQuestion(question);
    });
}

function clearAll() {
    if (confirm('Supprimer toutes les questions ?')) {
        document.getElementById('questionsContainer').innerHTML = '';
        questionCounter = 0;
        updateQuestionCount();
    }
}

function previewLatex() {
    const formData = new FormData(document.getElementById('qcmForm'));
    
    // Construire l'aper√ßu LaTeX
    let latex = `\\documentclass[a4paper]{article}
\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}
\\usepackage[francais,bloc]{automultiplechoice}
\\usepackage{multicol}

\\geometry{hmargin=2cm,headheight=2cm}
\\AMCrandomseed{1234567}
\\AMCboxDimensions{shape=oval}

\\begin{document}

\\noindent{\\bf QCM} \\hfill \\champnom{\\fbox{%
    \\begin{minipage}{.5\\linewidth}
      Nom et pr√©nom:\\\\[.5cm]\\dotfill\\\\[.5cm]\\dotfill
    \\end{minipage}%
  }}

\\begin{center}\\em
Instructions: Noircissez compl√®tement les cases correspondant aux bonnes r√©ponses.
\\end{center}

\\begin{multicols}{2}

`;

    const questionCount = parseInt(formData.get('question_count'));
    
    for (let i = 0; i < questionCount; i++) {
        const questionText = formData.get(`question_${i}_text`);
        if (questionText) {
            latex += `\\begin{question}{q${i + 1}}
  ${questionText}
  \\begin{choices}
`;
            
            const choiceCount = parseInt(formData.get(`question_${i}_choice_count`) || 0);
            for (let j = 0; j < choiceCount; j++) {
                const choiceText = formData.get(`question_${i}_choice_${j}_text`);
                const isCorrect = formData.get(`question_${i}_choice_${j}_correct`);
                
                if (choiceText) {
                    if (isCorrect) {
                        latex += `    \\correctchoice{${choiceText}}
`;
                    } else {
                        latex += `    \\wrongchoice{${choiceText}}
`;
                    }
                }
            }
            
            latex += `  \\end{choices}
\\end{question}

`;
        }
    }
    
    latex += `\\end{multicols}
\\end{document}`;
    
    document.getElementById('latexPreview').textContent = latex;
    document.getElementById('latexModal').style.display = 'block';
}

function closeLatexModal() {
    document.getElementById('latexModal').style.display = 'none';
}

// Fermer la modal en cliquant √† l'ext√©rieur
document.getElementById('latexModal').addEventListener('click', function(e) {
    if (e.target === this) {
        closeLatexModal();
    }
});
</script>
{% endblock %}
